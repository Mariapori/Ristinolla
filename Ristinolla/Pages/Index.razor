@using Microsoft.AspNetCore.SignalR.Client
@using Ristinolla.Data
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@page "/"

<PageTitle>Ristinolla</PageTitle>

@if (ruudut != null && rekisteroity)
{
    <div class="vuoro">
        <h2>Vuoro: @pelaaja.Nimi</h2>
    </div>
    <div id="peli">
        @foreach (var ruutu in ruudut)
        {
            <div class="ruudukko" @key="ruutu.Id" @onclick="() => ValitseRuutu(ruutu)">@ruutu.Pelaaja</div>
        }
    </div>
}
@if(!rekisteroity)
{
    <div class="vuoro">
        <label for="nickname">Nimimerkki:</label>
        <input id="nickname" name="nickname" @bind=nickname>
        <button class="btn btn-primary" @onclick=AsetaNimimerkki>Pelaa</button>
    </div>
}
else
{
        <div class="vuoro" style="max-width:600px; margin: 0 auto;">
            <table class="table table-striped">
            <thead class="table-dark text-white">
                <tr>
                    <th>Pelaaja</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr>
            @foreach(var pelaaja in pelaajat.Where(o => o.Pelaamassa == false))
            {
                        if(pelaaja.YhteysID == yhteysID)
                        {
                                                    <td><b>@pelaaja.Nimi (Sinä)</b></td>
                            <td></td>
                        }
                        else
                        {
                                                    <td><b>@pelaaja.Nimi</b></td>
                <td><button class="btn btn-dark">Haasta</button></td>
                        }

            }
                </tr>
            </tbody>
            </table>
        </div>
}



@code
{
    private List<Pelaaja> pelaajat;
    private List<Ruutu>? ruudut;
    private Pelaaja? pelaaja;
    private Pelaaja? voittaja;
    private HubConnection? hubConnection;
    private string? nickname;
    private string? yhteysID;
    public bool rekisteroity = false;

    protected override async void OnInitialized()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/gamehub")).Build();

        hubConnection.On<string>("rekisteroity", (conID) =>
        {
            yhteysID = conID;
            rekisteroity = true;
        });

        hubConnection.On<List<Pelaaja>>("pelaajaPaivitys", (pelaajatServer) =>
        {
            pelaajat = pelaajatServer;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public void AloitaPeli()
    {
        //ruudut = new List<Ruutu>();
        //for(int i = 0; i < 9; i++)
        //{
        //    ruudut.Add(new Ruutu { Id = i, Pelaaja = null });
        //}
    }

    public async Task AsetaNimimerkki()
    {
        if(hubConnection is not null && !string.IsNullOrEmpty(nickname))
        {
            await hubConnection.SendAsync("RekisteroiYhteys", nickname);
        }
    }

    public void ValitseRuutu(Ruutu valittu)
    {
        //if(valittu.Pelaaja == null && voittaja == null)
        //{
        //    valittu.Pelaaja = pelaaja;
        //    Voittiko();
        //    if(pelaaja == "X")
        //    {
        //        pelaaja = "0";
        //    }
        //    else
        //    {
        //        pelaaja = "X";
        //    }
        //}

    }


    //public bool Voittiko()
    //{
    //    if (ruudut != null && ruudut.Where(o => o.Pelaaja != null).Count() > 3)
    //    {
    //        var ruudutArray = ruudut.ToArray();
    //        int[,] voittolinjat = { { 0, 1, 2 }, { 3, 4, 5 }, { 6, 7, 8 }, { 0, 3, 6 }, { 1, 4, 7 }, { 2, 5, 8 }, { 0, 4, 8 }, { 2, 4, 6 } };
    //        for(int i = 0; i < 8; i++)
    //        {
    //            var a = ruudutArray[voittolinjat[i,0]].Pelaaja ?? "A";
    //            var b = ruudutArray[voittolinjat[i,1]].Pelaaja ?? "B";
    //            var c = ruudutArray[voittolinjat[i,2]].Pelaaja ?? "C";
    //            if(a == b && c == a)
    //            {
    //                voittaja = pelaaja;
    //                return true;
    //            }
    //        }
    //        if(ruudut.Where(o => o.Pelaaja != null).Count() == 9 && voittaja == null)
    //        {
    //            voittaja = null;
    //        }
    //        return false;
    //    }
    //    else
    //    {
    //        return false;
    //    }
    //}

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}