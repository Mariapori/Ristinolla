@using Microsoft.AspNetCore.SignalR.Client
@using Ristinolla.Data
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@page "/"

<PageTitle>Ristinolla</PageTitle>

@if(!rekisteroity)
{
    <div class="vuoro">
        <label for="nickname">Nimimerkki:</label>
        <input id="nickname" name="nickname" @bind=nickname>
        <button class="btn btn-primary" @onclick=AsetaNimimerkki>Pelaa</button>
    </div>
}
else
{
    @if(haastaja != null && peli == null)
    {
      <div class="vuoro">
      <h1>Haaste käyttäjältä @haastaja.Nimi  (Koko: @tarjottukoko.ToString() x @tarjottukoko.ToString())</h1>
      <button @onclick="() => AloitaPeli(haastaja, tarjottukoko.Value)" class="btn btn-success">Hyväksy</button>
      <button @onclick="() => { haastaja = null; tarjottukoko = null; }" class="btn btn-danger">Hylkää</button>
      </div>
    }
    else
    {
        @if (peli != null)
        {
            <div class="vuoro">
                <h2>Pelaaja: @pelaaja.Nimi</h2>
                <h2>Vuoro: @peli.Vuoro.Nimi</h2>
                @if(peli.Voittaja != null || peli.Ruudut.Where(o => o.Pelaaja != null).Count() == peli.Ruudut.Count)
                {
                    if(peli.Voittaja != null)
                    {
                        <h2>@peli.Voittaja.Nimi on voittanut pelin!</h2>
                    }
                    else
                    {
                        <h2>Tasapeli!</h2>
                    }
                    <button @onclick="() => Haasta(pelaaja.Nimi != peli.Aloittaja.Nimi ? peli.Aloittaja : peli.Haastettu, peli.ruutuKoko)" class="btn btn-dark">Haasta</button>
                }
            </div>
            <div id="peli" style="@styleforpeli">
                @foreach (var ruutu in peli.Ruudut)
                {
                    <div @onclick="() => ValitseRuutu(ruutu.Id)" class="ruudukko" @key="ruutu.Id">
                        @{
                            if (ruutu.Pelaaja != null)
                            {
                                if (ruutu.Pelaaja == pelaaja.Nimi)
                                {
                                    <text>X</text>
                                }
                                else
                                {
                                    <text>0</text>
                                }
                            }
                            else
                            {

                            }
                        }
                    </div>
                }
            </div>
            @if (haastaja != null)
            {   
                <div class="vuoro">
                <h1>Haaste käyttäjältä @haastaja.Nimi  (Koko: @tarjottukoko.ToString() x @tarjottukoko.ToString())</h1>
                <button @onclick="() => AloitaPeli(haastaja, tarjottukoko.Value)" class="btn btn-success">Hyväksy</button>
                <button @onclick="() => { haastaja = null; tarjottukoko = null; }" class="btn btn-danger">Hylkää</button>
                </div>
            }
            <div class="vuoro">
            <button @onclick="() => Poistu()" class="btn btn-danger">Poistu</button>
            </div>
        }
        else
        {
            <div class="vuoro" style="max-width:600px; margin: 0 auto;">
                <h2>Pelejä käynnissä: @pelejaKaynnissa</h2>
                <label>Pelin koko:</label><input type="number" @bind-value=pelinKoko >
                <i>Esimerkki: 3 = 3x3</i>
                <table class="table table-striped">
                    <thead class="table-dark text-white">
                        <tr>
                            <th>Pelaaja</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var peluri in pelaajat.Where(o => o.Pelaamassa == false))
                        {
                            <tr @key=peluri.YhteysID>
                                <td>@peluri.Nimi</td>
                                @{
                                    if (peluri.YhteysID != pelaaja.YhteysID)
                                    {
                                        <td><button @onclick="() => Haasta(peluri, pelinKoko)" class="btn btn-dark">Haasta</button></td>
                                    }
                                    else
                                    {
                                        <td></td>
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

    }

}



@code
{
    private int pelejaKaynnissa = 0;
    private List<Pelaaja> pelaajat;
    private List<Ruutu>? ruudut;
    private Pelaaja? pelaaja;
    public Peli? peli { get; set; }
    private Pelaaja? haastaja;
    public HubConnection? hubConnection;
    private string? nickname;
    public bool rekisteroity = false;
    public int pelinKoko = 3;
    public int? tarjottukoko;
    private string styleforpeli;

    protected override async void OnInitialized()
    {
        try
        {
            hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/gamehub")).Build();

            hubConnection.On<Pelaaja>("rekisteroity", (pelaajaser) =>
            {
                pelaaja = pelaajaser;
                rekisteroity = true;
            });

            hubConnection.On<Peli>("refresh", (paivitettypeli) =>
            {
                peli = paivitettypeli;
                StateHasChanged();
            });

            hubConnection.On<List<Pelaaja>>("pelaajaPaivitys", (pelaajatServer) =>
            {
                pelaajat = pelaajatServer;
                StateHasChanged();
            });

            hubConnection.On<int>("gamecount", (gameco) =>
            {       
                pelejaKaynnissa = gameco;
                StateHasChanged();
            });

            hubConnection.On<Pelaaja, int>("Haaste", (haastajaFromServer, koko) =>
            {
                haastaja = haastajaFromServer;
                tarjottukoko = koko;
                StateHasChanged();
            });

            hubConnection.On<Peli>("Peliin", (Id) =>
            {
                peli = Id;
                haastaja = null;
                styleforpeli = $"grid-template-columns: repeat({peli.ruutuKoko}, auto);";
                StateHasChanged();
            });


            await hubConnection.StartAsync();

            pelejaKaynnissa = await hubConnection.InvokeAsync<int>("GetGameCount");
        }
        catch
        {

        }

    }

    public async Task AloitaPeli(Pelaaja haastajac, int pelinkoko)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Pelaa", haastajac, pelinkoko);
        }
    }

    public async Task Poistu()
    {
        if(hubConnection is not null)
        {
            peli = null;
            await hubConnection.SendAsync("Poistu");
        }
    }

    public async Task ValitseRuutu(int id)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Aseta", peli.Id, id);
        }
    }

    public async Task AsetaNimimerkki()
    {
        if(hubConnection is not null && !string.IsNullOrEmpty(nickname))
        {
            await hubConnection.SendAsync("RekisteroiYhteys", nickname);
        }
    }

    public async Task Haasta(Pelaaja haastettava, int pelKoko)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Haasta", haastettava, pelKoko);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}