@using Microsoft.AspNetCore.SignalR.Client
@using Ristinolla.Data
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@page "/"

<PageTitle>Ristinolla</PageTitle>
@if(ruudut != null)
{
            <div class="vuoro">
            <h2>Vuoro: @pelaaja.Nimi</h2>
        </div>
    <div id="peli">
    @foreach(var ruutu in ruudut)
    {
        <div class="ruudukko" @key="ruutu.Id" @onclick="() => ValitseRuutu(ruutu)">@ruutu.Pelaaja</div>
    }
</div>
    @if(voittaja != null)
    {
        <div class="voittaja">
            <h2>Voittaja: @voittaja.Nimi</h2>
        </div>
        <div class="vuoro">
            <button class="btn btn-primary" @onclick="() => AloitaPeli()">Pelaa uudestaan</button>
        </div>
    }

}
else
{
    @if(pelaaja is null)
    {
        <input @bind="nickname" placeholder="Nimimerkkisi"/><br />
        <button @onclick="() => AsetaNimimerkki()">Pelaa</button>
    }
        @if(pelaaja is not null)
    {
        <h4>Pelaajat</h4>
<ul class="list-group">
            @foreach(var player in pelaajat.Where(o => o.Pelaamassa == false && o.YhteysID == hubConnection.ConnectionId))
            {
                <li class="list-group-item" @onclick="() => Haasta(player)">@player.Nimi</li>
            }
        </ul>
    }

}



@code{
    private List<Pelaaja> pelaajat = new List<Pelaaja>();
    private List<Ruutu>? ruudut;
    private Pelaaja? pelaaja;
    private Pelaaja? voittaja;
    private HubConnection? hubConnection;
    private string? nickname;

    protected override async void OnInitialized()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<Pelaaja>("UusiPelaaja", (uus) =>
        {
            if(uus.YhteysID == hubConnection.ConnectionId)
            {
                pelaaja = uus;
            }
            else
            {
                pelaajat.Add(uus);
            }
        });

        hubConnection.On<string>("OtaHaaste", (haastaja) =>
        {
            Console.WriteLine("Haaste pelaajalta " + haastaja);
        });

        await hubConnection.StartAsync();
    }

    public void AloitaPeli()
    {
        //ruudut = new List<Ruutu>();
        //for(int i = 0; i < 9; i++)
        //{
        //    ruudut.Add(new Ruutu { Id = i, Pelaaja = null });
        //}
    }

    public async Task Haasta(Pelaaja haastettava)
    {
        await hubConnection.SendAsync("Haaste", haastettava);
    }

    public async Task AsetaNimimerkki()
    {
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("RekisteroiYhteys", nickname);
        }
    }

    public void ValitseRuutu(Ruutu valittu)
    {
        //if(valittu.Pelaaja == null && voittaja == null)
        //{
        //    valittu.Pelaaja = pelaaja;
        //    Voittiko();
        //    if(pelaaja == "X")
        //    {
        //        pelaaja = "0";
        //    }
        //    else
        //    {
        //        pelaaja = "X";
        //    }
        //}

    }


    public bool Voittiko()
    {
        if (ruudut != null && ruudut.Where(o => o.Pelaaja != null).Count() > 3)
        {
            var ruudutArray = ruudut.ToArray();
            int[,] voittolinjat = { { 0, 1, 2 }, { 3, 4, 5 }, { 6, 7, 8 }, { 0, 3, 6 }, { 1, 4, 7 }, { 2, 5, 8 }, { 0, 4, 8 }, { 2, 4, 6 } };
            for(int i = 0; i < 8; i++)
            {
                var a = ruudutArray[voittolinjat[i,0]].Pelaaja ?? "A";
                var b = ruudutArray[voittolinjat[i,1]].Pelaaja ?? "B";
                var c = ruudutArray[voittolinjat[i,2]].Pelaaja ?? "C";
                if(a == b && c == a)
                {
                    voittaja = pelaaja;
                    return true;
                }
            }
            if(ruudut.Where(o => o.Pelaaja != null).Count() == 9 && voittaja == null)
            {
                voittaja = null;
            }
            return false;
        }
        else
        {
            return false;
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}